---
name: Claude PR Auto Review

on:
  pull_request:
    types: [opened, synchronize]
  issue_comment:
    types: [created]

jobs:
  auto-review:
    # Run on PR events, or when someone comments "@claude reviewer" on a PR
    if: |
      (github.event_name == 'pull_request' &&
        !contains(github.event.pull_request.title, '[skip-review]') &&
        !contains(github.event.pull_request.title, '[WIP]')) ||
      (github.event_name == 'issue_comment' && 
        github.event.issue.pull_request && 
        contains(github.event.comment.body, '@claude reviewer'))
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Full history for better diff analysis
          
      - name: Automatic PR Review
        id: claude-review
        uses: anthropics/claude-code-action@v1-dev
        env:
          NPM_CONFIG_MAXSOCKETS: "15"
          NPM_CONFIG_NETWORK_CONCURRENCY: "1"
          # increase from default 25000 to allow reading PR files from MCP (otherwise reads them using gh command anyway)
          MAX_MCP_OUTPUT_TOKENS: "100000"
        with:
          additional_permissions: |
            actions: read
          # github_token not needed - uses default GITHUB_TOKEN for GitHub operations
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          # Use just one comment to deliver PR comments (only applies for pull_request event workflows)
          use_sticky_comment: true
          # Enable commit signing using GitHub's commit signature verification. When false, Claude uses standard git commands
          # use_commit_signing: true
          claude_args: |
            --max-turns 15
            --model claude-opus-4-1-20250805
            --system-prompt "You are a senior engineer focused on code quality. You are a performance optimization expert. Focus on identifying bottlenecks and suggesting improvements."
            --allowedTools "Task,Bash,Glob,Grep,LS,ExitPlanMode,Read,Edit,MultiEdit,Write,NotebookEdit,TodoWrite,BashOutput,KillBash,mcp__github_inline_comment__create_inline_comment,mcp__github_ci__get_ci_status,mcp__github_ci__get_workflow_run_details,mcp__github_ci__download_job_log,mcp__github_comment__update_claude_comment,mcp__github__add_comment_to_pending_review,mcp__github__create_and_submit_pull_request_review,mcp__github__create_issue,mcp__github__create_or_update_file,mcp__github__create_pending_pull_request_review,mcp__github__delete_pending_pull_request_review,mcp__github__download_workflow_run_artifact,mcp__github__get_code_scanning_alert,mcp__github__get_commit,mcp__github__get_dependabot_alert,mcp__github__get_file_contents,mcp__github__get_job_logs,mcp__github__get_me,mcp__github__get_pull_request,mcp__github__get_pull_request_comments,mcp__github__get_pull_request_diff,mcp__github__get_pull_request_files,mcp__github__get_pull_request_reviews,mcp__github__get_pull_request_status,mcp__github__get_secret_scanning_alert,mcp__github__get_workflow_run,mcp__github__get_workflow_run_logs,mcp__github__list_branches,mcp__github__list_code_scanning_alerts,mcp__github__list_commits,mcp__github__list_dependabot_alerts,mcp__github__list_pull_requests,mcp__github__list_secret_scanning_alerts,mcp__github__list_workflow_jobs,mcp__github__list_workflow_run_artifacts,mcp__github__list_workflow_runs,mcp__github__list_workflows,mcp__github__merge_pull_request,mcp__github__push_files,mcp__github__rerun_failed_jobs,mcp__github__rerun_workflow_run,mcp__github__run_workflow,mcp__github__search_code,mcp__github__search_pull_requests,mcp__github__submit_pending_pull_request_review,mcp__github__update_pull_request,mcp__github__update_pull_request_branch,ListMcpResourcesTool,ReadMcpResourceTool"
            --disallowedTools WebSearch,WebFetch
          
          # Disabled: creates a mess to review. Inline suggestions are often broken
          # Use GitHub's suggestion format when proposing code changes.
          # Use inline comments to highlight specific areas of concern.
          prompt: |
            Please review this PR #${{ github.event.pull_request.number }} with comprehensive analysis covering both general software engineering principles and OCI automation specifics:

            **General Code Quality & Best Practices:**
            - Code structure, readability, and maintainability
            - Proper error handling and input validation
            - Logic bugs, edge cases, and null checks
            - Algorithm efficiency and resource usage
            - Documentation quality and code comments
            - Adherence to coding standards and conventions
            - Verify that README.md and docs are updated for any new features or config changes

            **Security Analysis (General & OCI-Specific):**
            - Input validation and injection vulnerabilities
            - Authentication and authorization patterns
            - **Credential Safety**: Check for exposed credentials (OCI OCIDs, keys, SSH keys, tokens)
            - Verify secrets are only used in GitHub Actions, never in artifacts
            - Distinguish capacity issues from real security failures

            **Performance Considerations:**
            - Algorithm complexity and optimization opportunities
            - Memory usage and resource efficiency
            - **OCI Performance**: Target <1 minute execution time
            - **GitHub Actions**: Monitor usage to stay under 1,800 minutes/month target
            - Caching strategies and optimization patterns

            **Test Coverage & Quality:**
            - Test completeness and edge case coverage
            - Test quality, clarity, and maintainability
            - Integration test scenarios
            - Error condition testing
            - All other workflows passing successfully, including checks and linters

            **OCI-Specific Automation Patterns:**
            - Verify capacity errors return 0 (expected) vs 1 (real failure)
            - OCI CLI optimization

            **Potential Bugs & Issues:**
            - Race conditions and concurrency issues
            - Boundary conditions and error states
            - Configuration and environment dependencies
            - Workflow and automation reliability
            - Main workflow in infrastructure-deployment.yml passes without degradation, no unexpected errors

            Be constructive, thorough, and provide specific actionable feedback.
            Provide severity ratings (Critical/High/Medium/Low) for any issues found.
