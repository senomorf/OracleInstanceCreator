permissions:
  contents: read
  actions: write
name: 'Oracle Free Tier Instance Creator (Parallel)'

on:
  schedule:
    # Three-tier regional optimization: 85% cost reduction (7,200→1,068 runs/month)
    # All schedules target Oracle Cloud low-usage windows for maximum success rate
    
    # TIER 1: Off-peak aggressive (550 runs/month)
    # UTC 2-7am = SGT 10am-3pm (lunch/afternoon lull)
    # UTC 2-7am = EST 9pm-2am (late evening/night)  
    # UTC 2-7am = CET 3-8am (early morning)
    - cron: "*/15 2-7 * * *"
    
    # TIER 2: Conservative peak (374 runs/month)  
    # UTC 8-23,0-1am = SGT 4pm-7am (avoids 8am-3pm business peak)
    # 17 total hours at 60min intervals = conservative approach
    - cron: "0 8-23,0-1 * * *"
    
    # TIER 3: Weekend boost (144 runs/month)
    # Weekends only: UTC 1-6am = SGT 9am-2pm (lower weekend cloud usage)
    # 20min intervals for 5 hours × 2 days = moderate frequency
    - cron: "*/20 1-6 * * 6,0"

  workflow_dispatch:
    inputs:
      verbose_output:
        description: 'Enable debug/verbose output'
        type: boolean
        default: true
      send_notifications:
        description: 'Send Telegram notifications'
        type: boolean
        default: true
      check_existing_instance:
        description: 'Check for existing instance before launch'
        type: boolean
        default: true
      reset_success_state:
        description: 'Reset INSTANCE_CREATED variable to allow new attempts'
        type: boolean
        default: false
      adaptive_scheduling:
        description: 'Enable adaptive scheduling based on success patterns'
        type: boolean
        default: true
      region_optimization:
        description: 'Use region-specific timing optimization'
        type: boolean
        default: true

# Prevent multiple workflow runs from overlapping to avoid billing spikes
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  # Global environment variables
  DEBUG: ${{ inputs.verbose_output && 'true' || 'false' }}
  ENABLE_NOTIFICATIONS: ${{ inputs.send_notifications && 'true' || 'false' }}
  # For scheduled runs: skip instance check (direct launch), for manual: allow checking
  CHECK_EXISTING_INSTANCE: ${{ github.event_name == 'workflow_dispatch' && (inputs.check_existing_instance && 'true' || 'false') || 'false' }}
  # Suppress OCI CLI file permissions warnings
  OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING: true

jobs:
  create-instance:
    # Skip execution if instance already created (unless manually reset)
    if: vars.INSTANCE_CREATED != 'true' || inputs.reset_success_state
    runs-on: ubuntu-latest
    name: Create OCI Instances (Both Shapes)
    permissions:
      contents: read
    env:
      # Common configuration for both shapes
      # Multi-AD support: Use comma-separated list for multiple ADs
      # Example: "fgaj:AP-SINGAPORE-1-AD-1,fgaj:AP-SINGAPORE-1-AD-2,fgaj:AP-SINGAPORE-1-AD-3"
      OCI_AD: "fgaj:AP-SINGAPORE-1-AD-1"
      OCI_SHAPE: "VM.Standard.A1.Flex"  # Default shape for validation (overridden per-shape)
      OCI_OCPUS: "4"  # Default for A1.Flex validation (overridden per-shape)
      OCI_MEMORY_IN_GBS: "24"  # Default for A1.Flex validation (overridden per-shape)
      INSTANCE_DISPLAY_NAME: "default-instance"  # Default for validation (overridden per-shape)
      ASSIGN_PUBLIC_IP: "false"
      OPERATING_SYSTEM: "Oracle Linux"
      OS_VERSION: "9"
      # Boot volume configuration
      BOOT_VOLUME_SIZE: "50"
      # Instance recovery and compatibility settings
      RECOVERY_ACTION: "RESTORE_INSTANCE"
      LEGACY_IMDS_ENDPOINTS: "false"
      # Retry configuration for multi-AD cycling
      RETRY_WAIT_TIME: "30"
      # Transient error retry configuration (retries on same AD before cycling)
      TRANSIENT_ERROR_MAX_RETRIES: "3"
      TRANSIENT_ERROR_RETRY_DELAY: "15"
      # Instance verification timeout configuration
      INSTANCE_VERIFY_MAX_CHECKS: "5"
      INSTANCE_VERIFY_DELAY: "30"
      # Logging configuration (set to 'json' for structured logging)
      LOG_FORMAT: "text"
      # Cached image IDs for both free tier shapes (update periodically)
      OCI_CACHED_OL9_ARM_IMAGE: "ocid1.image.oc1.ap-singapore-1.aaaaaaaalp5rsngiayobfuxdurkxdnxgkxjfbfqpl2c2yebldjmrrtbrteaa"
      OCI_CACHED_OL9_AMD_IMAGE: "ocid1.image.oc1.ap-singapore-1.aaaaaaaaejbjeklplq5qnuqlbpfszmywma2j3en3o7pjuc7jidtifmqgqxlq"
      # Adaptive scheduling configuration
      ENABLE_ADAPTIVE_SCHEDULING: ${{ inputs.adaptive_scheduling && 'true' || 'true' }}
      ENABLE_REGION_OPTIMIZATION: ${{ inputs.region_optimization && 'true' || 'true' }}
      ORACLE_REGION_TIMEZONE: "Asia/Singapore"
      SUCCESS_TRACKING_ENABLED: "true"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Reset success state if requested
        if: inputs.reset_success_state
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Resetting INSTANCE_CREATED variable to allow new instance creation attempts"
          gh variable set INSTANCE_CREATED --body "false" || true
          gh variable delete INSTANCE_CREATED_INFO 2>/dev/null || true
          gh variable delete SUCCESS_PATTERN_DATA 2>/dev/null || true
          echo "Success state and pattern tracking reset completed"

      - name: Adaptive Scheduling Intelligence
        if: env.ENABLE_ADAPTIVE_SCHEDULING == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./scripts/adaptive-scheduler.sh

      - name: Create requirements file
        run: echo "oci-cli" > requirements.txt

      - name: Setup Python
        uses: actions/setup-python@v5.6.0
        id: setup-python
        with:
          python-version: '3.x'
          check-latest: false
          update-environment: true

      - name: Cache pip dependencies
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib
            ~/.local/bin
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pip-

      - name: Install OCI CLI
        run: pip install --user -r requirements.txt

      - name: Production preflight check
        env:
          OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
          OCI_KEY_FINGERPRINT: ${{ secrets.OCI_KEY_FINGERPRINT }}
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_COMPARTMENT_ID: ${{ secrets.OCI_COMPARTMENT_ID }}
          OCI_SUBNET_ID: ${{ secrets.OCI_SUBNET_ID }}
          OCI_IMAGE_ID: ${{ secrets.OCI_IMAGE_ID }}
          OCI_PROXY_URL: ${{ secrets.OCI_PROXY_URL }}
          INSTANCE_SSH_PUBLIC_KEY: ${{ secrets.INSTANCE_SSH_PUBLIC_KEY }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        run: ./scripts/preflight-check.sh

      - name: Setup OCI and SSH configuration (parallel)
        env:
          OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
          OCI_KEY_FINGERPRINT: ${{ secrets.OCI_KEY_FINGERPRINT }}
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_PROXY_URL: ${{ secrets.OCI_PROXY_URL }}
          INSTANCE_SSH_PUBLIC_KEY: ${{ secrets.INSTANCE_SSH_PUBLIC_KEY }}
        run: |
          # Run setup scripts in parallel for faster execution
          ./scripts/setup-oci.sh &
          ./scripts/setup-ssh.sh &
          wait

      - name: Launch OCI Instances (Parallel)
        env:
          OCI_COMPARTMENT_ID: ${{ secrets.OCI_COMPARTMENT_ID }}
          OCI_SUBNET_ID: ${{ secrets.OCI_SUBNET_ID }}
          OCI_IMAGE_ID: ${{ secrets.OCI_IMAGE_ID }}
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          OCI_PROXY_URL: ${{ secrets.OCI_PROXY_URL }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        run: ./scripts/launch-parallel.sh

      - name: Schedule Optimization Analysis
        if: always() && env.ENABLE_ADAPTIVE_SCHEDULING == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
        run: ./scripts/schedule-optimizer.sh

  notify-on-failure:
    runs-on: ubuntu-latest
    name: Send Failure Notification (Both Shapes Failed)
    needs: create-instance
    if: failure()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if failure was due to capacity
        id: check-capacity
        run: |
          # Check if the failure was due to capacity issues
          # This provides defense-in-depth against false failure notifications
          echo "capacity_error=false" >> $GITHUB_OUTPUT
          # Note: GitHub job logs would need to be checked via API for full implementation
          # For now, we rely on the script-level fix to handle capacity errors properly

      - name: Send failure notification
        if: steps.check-capacity.outputs.capacity_error != 'true'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        run: |
          if [[ "$ENABLE_NOTIFICATIONS" == "true" ]]; then
            source scripts/notify.sh
            notify_workflow_completed "failed"
          fi
