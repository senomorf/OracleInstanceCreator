name: 'Oracle Free Tier Instance Creator'

on:
  schedule:
    - cron: "*/6 * * * *"

  workflow_dispatch:
    inputs:
      verbose_output:
        description: 'Enable debug/verbose output'
        type: boolean
        default: true
      send_notifications:
        description: 'Send Telegram notifications'
        type: boolean
        default: true
      check_existing_instance:
        description: 'Check for existing instance before launch'
        type: boolean
        default: true

env:
  # Global environment variables
  DEBUG: ${{ inputs.verbose_output && 'true' || 'false' }}
  ENABLE_NOTIFICATIONS: ${{ inputs.send_notifications && 'true' || 'false' }}
  # For scheduled runs: skip instance check (direct launch), for manual: allow checking
  CHECK_EXISTING_INSTANCE: ${{ github.event_name == 'workflow_dispatch' && (inputs.check_existing_instance && 'true' || 'false') || 'false' }}
  # Suppress OCI CLI file permissions warnings
  OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING: true

jobs:
  create-instance:
    runs-on: ubuntu-latest
    name: Create OCI Instance
    env:
      # Instance configuration (defaults)
      # Multi-AD support: Use comma-separated list for multiple ADs
      # Example: "fgaj:AP-SINGAPORE-1-AD-1,fgaj:AP-SINGAPORE-1-AD-2,fgaj:AP-SINGAPORE-1-AD-3"
      OCI_AD: "fgaj:AP-SINGAPORE-1-AD-1"
      OCI_SHAPE: "VM.Standard.A1.Flex"
      OCI_OCPUS: "4"
      OCI_MEMORY_IN_GBS: "24"
      INSTANCE_DISPLAY_NAME: "a1-sg"
      ASSIGN_PUBLIC_IP: "false"
      OPERATING_SYSTEM: "Oracle Linux"
      OS_VERSION: "9"
      # Boot volume configuration
      BOOT_VOLUME_SIZE: "50"
      # Instance recovery and compatibility settings
      RECOVERY_ACTION: "RESTORE_INSTANCE"
      LEGACY_IMDS_ENDPOINTS: "false"
      # Retry configuration for multi-AD cycling
      RETRY_WAIT_TIME: "30"
      # Instance verification timeout configuration
      INSTANCE_VERIFY_MAX_CHECKS: "5"
      INSTANCE_VERIFY_DELAY: "30"
      # Logging configuration (set to 'json' for structured logging)
      LOG_FORMAT: "text"
      # Common image ID cache for Oracle Linux 9 ARM (update periodically)
      OCI_CACHED_OL9_ARM_IMAGE: "ocid1.image.oc1.ap-singapore-1.aaaaaaaalp5rsngiayobfuxdurkxdnxgkxjfbfqpl2c2yebldjmrrtbrteaa"
      OCI_CACHED_OL9_AMD_IMAGE: "ocid1.image.oc1.ap-singapore-1.aaaaaaaaejbjeklplq5qnuqlbpfszmywma2j3en3o7pjuc7jidtifmqgqxlq"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create requirements file
        run: echo "oci-cli" > requirements.txt

      - name: Setup Python
        uses: actions/setup-python@v5.6.0
        id: setup-python
        with:
          python-version: '3.x'
          check-latest: false
          update-environment: true

      - name: Cache pip dependencies
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib
            ~/.local/bin
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pip-

      - name: Install OCI CLI
        run: pip install --user -r requirements.txt

      - name: Production preflight check
        env:
          OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
          OCI_KEY_FINGERPRINT: ${{ secrets.OCI_KEY_FINGERPRINT }}
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_COMPARTMENT_ID: ${{ secrets.OCI_COMPARTMENT_ID }}
          OCI_SUBNET_ID: ${{ secrets.OCI_SUBNET_ID }}
          OCI_IMAGE_ID: ${{ secrets.OCI_IMAGE_ID }}
          OCI_PROXY_URL: ${{ secrets.OCI_PROXY_URL }}
          INSTANCE_SSH_PUBLIC_KEY: ${{ secrets.INSTANCE_SSH_PUBLIC_KEY }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        run: ./scripts/preflight-check.sh

      - name: Setup OCI and SSH configuration (parallel)
        env:
          OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
          OCI_KEY_FINGERPRINT: ${{ secrets.OCI_KEY_FINGERPRINT }}
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_PROXY_URL: ${{ secrets.OCI_PROXY_URL }}
          INSTANCE_SSH_PUBLIC_KEY: ${{ secrets.INSTANCE_SSH_PUBLIC_KEY }}
        run: |
          # Run setup scripts in parallel for faster execution
          ./scripts/setup-oci.sh &
          ./scripts/setup-ssh.sh &
          wait

      - name: Launch OCI Instance
        env:
          OCI_COMPARTMENT_ID: ${{ secrets.OCI_COMPARTMENT_ID }}
          OCI_SUBNET_ID: ${{ secrets.OCI_SUBNET_ID }}
          OCI_IMAGE_ID: ${{ secrets.OCI_IMAGE_ID }}
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          OCI_PROXY_URL: ${{ secrets.OCI_PROXY_URL }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        run: ./scripts/launch-instance.sh

  notify-on-failure:
    runs-on: ubuntu-latest
    name: Send Failure Notification
    needs: create-instance
    if: failure()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if failure was due to capacity
        id: check-capacity
        run: |
          # Check if the failure was due to capacity issues
          # This provides defense-in-depth against false failure notifications
          echo "capacity_error=false" >> $GITHUB_OUTPUT
          # Note: GitHub job logs would need to be checked via API for full implementation
          # For now, we rely on the script-level fix to handle capacity errors properly

      - name: Send failure notification
        if: steps.check-capacity.outputs.capacity_error != 'true'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        run: |
          if [[ "$ENABLE_NOTIFICATIONS" == "true" ]]; then
            source scripts/notify.sh
            notify_workflow_completed "failed"
          fi
