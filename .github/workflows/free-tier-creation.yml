name: 'Oracle Free Tier Instance Creator'

on:
  schedule:
    - cron: "*/6 * * * *"

  workflow_dispatch:
    inputs:
      verbose_output:
        description: 'Enable debug/verbose output'
        type: boolean
        default: true
      send_notifications:
        description: 'Send Telegram notifications'
        type: boolean
        default: true

env:
  # Global environment variables
  DEBUG: ${{ inputs.verbose_output && 'true' || 'false' }}
  ENABLE_NOTIFICATIONS: ${{ inputs.send_notifications && 'true' || 'false' }}
  # Suppress OCI CLI file permissions warnings
  OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING: true

jobs:
  create-instance:
    runs-on: ubuntu-latest
    name: Create OCI Instance
    env:
      # Instance configuration (defaults)
      OCI_AD: "fgaj:AP-SINGAPORE-1-AD-1"
      OCI_SHAPE: "VM.Standard.A1.Flex"
      OCI_OCPUS: "4"
      OCI_MEMORY_IN_GBS: "24"
      INSTANCE_DISPLAY_NAME: "a1-sg"
      ASSIGN_PUBLIC_IP: "false"
      OPERATING_SYSTEM: "Oracle Linux"
      OS_VERSION: "9"
      # Common image ID cache for Oracle Linux 9 ARM (update periodically)
      OCI_CACHED_OL9_ARM_IMAGE: "ocid1.image.oc1.ap-singapore-1.aaaaaaaa7l5pths62jxzpqzh3mfbw6qjzrcpv6h3ek2tewqr57hbj5v4mhca"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate configuration
        env:
          OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
          OCI_KEY_FINGERPRINT: ${{ secrets.OCI_KEY_FINGERPRINT }}
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_COMPARTMENT_ID: ${{ secrets.OCI_COMPARTMENT_ID }}
          OCI_SUBNET_ID: ${{ secrets.OCI_SUBNET_ID }}
          OCI_IMAGE_ID: ${{ secrets.OCI_IMAGE_ID }}
          INSTANCE_SSH_PUBLIC_KEY: ${{ secrets.INSTANCE_SSH_PUBLIC_KEY }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        run: ./scripts/validate-config.sh

      - name: Create requirements file
        run: echo "oci-cli" > requirements.txt

      - name: Setup Python with caching
        uses: actions/setup-python@v5.6.0
        id: setup-python
        with:
          python-version: '3.x'
          check-latest: false
          update-environment: true
          cache: 'pip'

      - name: Install OCI CLI
        run: pip install --user -r requirements.txt

      - name: Setup OCI and SSH configuration (parallel)
        env:
          OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
          OCI_KEY_FINGERPRINT: ${{ secrets.OCI_KEY_FINGERPRINT }}
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
          INSTANCE_SSH_PUBLIC_KEY: ${{ secrets.INSTANCE_SSH_PUBLIC_KEY }}
        run: |
          # Run setup scripts in parallel for faster execution
          ./scripts/setup-oci.sh &
          ./scripts/setup-ssh.sh &
          wait

      - name: Launch OCI Instance
        env:
          OCI_COMPARTMENT_ID: ${{ secrets.OCI_COMPARTMENT_ID }}
          OCI_SUBNET_ID: ${{ secrets.OCI_SUBNET_ID }}
          OCI_IMAGE_ID: ${{ secrets.OCI_IMAGE_ID }}
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        run: ./scripts/launch-instance.sh

  notify-on-failure:
    runs-on: ubuntu-latest
    name: Send Failure Notification
    needs: create-instance
    if: failure()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if failure was due to capacity
        id: check-capacity
        run: |
          # Check if the failure was due to capacity issues
          # This provides defense-in-depth against false failure notifications
          echo "capacity_error=false" >> $GITHUB_OUTPUT
          # Note: GitHub job logs would need to be checked via API for full implementation
          # For now, we rely on the script-level fix to handle capacity errors properly

      - name: Send failure notification
        if: steps.check-capacity.outputs.capacity_error != 'true'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        run: |
          if [[ "$ENABLE_NOTIFICATIONS" == "true" ]]; then
            source scripts/notify.sh
            notify_workflow_completed "failed"
          fi
