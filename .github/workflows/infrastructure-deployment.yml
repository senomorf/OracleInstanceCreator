---
permissions:
  contents: read
  actions: write
name: 'OCI Orchestrator - Infrastructure Deployment'

on:
  schedule:
    # Four-tier optimization: 10-min off-peak weekdays, 15-min peak weekdays, 10-min all weekend (~4,320 runs/month)
    # All schedules target Oracle Cloud optimal availability windows for maximum deployment success

    # TIER 1: Off-peak aggressive (10-min intervals) - Weekdays only
    # UTC 2-7am = SGT 10am-3pm (lunch/afternoon lull)
    # UTC 2-7am = EST 9pm-2am (late evening/night)
    # UTC 2-7am = CET 3-8am (early morning)
    - cron: "*/10 2-7 * * 1-5"

    # TIER 2: Late night/early morning (10-min intervals) - Weekdays only
    # UTC 20-23 = SGT 4am-7am (early morning low usage, avoids overlap with TIER 1)
    - cron: "*/10 20-23 * * 1-5"

    # TIER 3: Peak hours conservative (15-min intervals) - Weekdays only
    # UTC 8-19 = SGT 4pm-3am (business end + evening peak)
    - cron: "*/15 8-19 * * 1-5"

    # TIER 4: Weekend boost (10-min intervals all day)
    # Saturdays and Sundays - lower weekend cloud usage, no overlap with weekday tiers
    - cron: "*/10 * * * 6,0"

  workflow_dispatch:
    inputs:
      verbose_output:
        description: 'Enable debug/verbose output'
        type: boolean
        default: true
      send_notifications:
        description: 'Send Telegram notifications'
        type: boolean
        default: true
      check_existing_instance:
        description: 'Check for existing instance before launch'
        type: boolean
        default: true
      reset_success_state:
        description: 'Reset INSTANCE_CREATED variable to allow new attempts'
        type: boolean
        default: false
      adaptive_scheduling:
        description: 'Enable adaptive scheduling based on success patterns'
        type: boolean
        default: true
      region_optimization:
        description: 'Use region-specific timing optimization'
        type: boolean
        default: true

# Prevent multiple workflow runs from overlapping to avoid billing spikes
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  # Global environment variables
  DEBUG: ${{ inputs.verbose_output && 'true' || 'false' }}
  ENABLE_NOTIFICATIONS: ${{ github.event_name == 'workflow_dispatch' && (inputs.send_notifications && 'true' || 'false') || 'true' }}
  # Enable instance check by default to use state management cache (can be overridden manually)
  CHECK_EXISTING_INSTANCE: ${{ github.event_name == 'workflow_dispatch' && (inputs.check_existing_instance && 'true' || 'false') || 'true' }}
  # Suppress OCI CLI file permissions warnings
  OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING: true

jobs:
  create-instance:
    # Skip execution if instance already created (unless manually reset)
    if: ${{ github.event.repository.vars.INSTANCE_CREATED != 'true' || inputs.reset_success_state }}
    runs-on: ubuntu-latest
    name: Deploy OCI Infrastructure (Parallel Orchestration)
    permissions:
      contents: read
    env:
      # Common configuration for both shapes
      # Multi-AD support: Use comma-separated list for multiple ADs
      # Example: "fgaj:AP-SINGAPORE-1-AD-1,fgaj:AP-SINGAPORE-1-AD-2,fgaj:AP-SINGAPORE-1-AD-3"
      OCI_AD: "fgaj:AP-SINGAPORE-1-AD-1"
      OCI_SHAPE: "VM.Standard.A1.Flex"  # Default shape for validation (overridden per-shape)
      OCI_OCPUS: "4"  # Default for A1.Flex validation (overridden per-shape)
      OCI_MEMORY_IN_GBS: "24"  # Default for A1.Flex validation (overridden per-shape)
      INSTANCE_DISPLAY_NAME: "default-instance"  # Default for validation (overridden per-shape)
      ASSIGN_PUBLIC_IP: "false"
      OPERATING_SYSTEM: "Oracle Linux"
      OS_VERSION: "9"
      # Boot volume configuration
      BOOT_VOLUME_SIZE: "50"
      # Instance recovery and compatibility settings
      RECOVERY_ACTION: "RESTORE_INSTANCE"
      LEGACY_IMDS_ENDPOINTS: "false"
      # Retry configuration for multi-AD cycling
      RETRY_WAIT_TIME: "30"
      # Transient error retry configuration (retries on same AD before cycling)
      TRANSIENT_ERROR_MAX_RETRIES: "3"
      TRANSIENT_ERROR_RETRY_DELAY: "15"
      # Instance verification timeout configuration
      INSTANCE_VERIFY_MAX_CHECKS: "5"
      INSTANCE_VERIFY_DELAY: "30"
      # Logging configuration (set to 'json' for structured logging)
      LOG_FORMAT: "text"
      # Cached image IDs for supported instance shapes (update periodically)
      OCI_CACHED_OL9_ARM_IMAGE: "ocid1.image.oc1.ap-singapore-1.aaaaaaaalp5rsngiayobfuxdurkxdnxgkxjfbfqpl2c2yebldjmrrtbrteaa"
      OCI_CACHED_OL9_AMD_IMAGE: "ocid1.image.oc1.ap-singapore-1.aaaaaaaaejbjeklplq5qnuqlbpfszmywma2j3en3o7pjuc7jidtifmqgqxlq"
      # Adaptive scheduling configuration
      ENABLE_ADAPTIVE_SCHEDULING: ${{ inputs.adaptive_scheduling && 'true' || 'true' }}
      ENABLE_REGION_OPTIMIZATION: ${{ inputs.region_optimization && 'true' || 'true' }}
      ORACLE_REGION_TIMEZONE: "Asia/Singapore"
      SUCCESS_TRACKING_ENABLED: "true"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Get current date for cache key
        id: get-date
        run: echo "date=$(date '+%Y-%m-%d')" >> "$GITHUB_OUTPUT"

      - name: Generate cache key with region hash
        id: cache-key
        env:
          OCI_REGION: ${{ secrets.OCI_REGION }}
        run: |
          # Generate region hash to match state-manager.sh logic
          region_hash=$(echo -n "$OCI_REGION" | sha256sum | cut -d' ' -f1 | head -c 8)
          echo "key=oci-instances-${region_hash}-v1-${{ steps.get-date.outputs.date }}" >> "$GITHUB_OUTPUT"
          echo "prefix=oci-instances-${region_hash}-v1-" >> "$GITHUB_OUTPUT"

      - name: Restore instance state cache
        id: cache-instance-state
        uses: actions/cache/restore@v4.2.4
        with:
          path: .cache/oci-state
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ steps.cache-key.outputs.prefix }}
            oci-instances-

      - name: Initialize state manager
        env:
          CACHE_ENABLED: "true"
          CACHE_TTL_HOURS: "24"
          CACHE_DATE_KEY: ${{ steps.get-date.outputs.date }}
        run: |
          # Make state manager executable
          chmod +x scripts/state-manager.sh
          # Initialize state management system
          ./scripts/state-manager.sh init
          # Show current state for debugging
          if [[ "$DEBUG" == "true" ]]; then
            ./scripts/state-manager.sh print
          fi

      - name: Reset success state if requested
        if: inputs.reset_success_state
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Resetting INSTANCE_CREATED variable to allow new deployment attempts"
          gh variable set INSTANCE_CREATED --body "false" || true
          gh variable delete INSTANCE_CREATED_INFO 2>/dev/null || true
          gh variable delete SUCCESS_PATTERN_DATA 2>/dev/null || true
          echo "Success state and pattern tracking reset completed"

      - name: Adaptive Scheduling Intelligence
        if: env.ENABLE_ADAPTIVE_SCHEDULING == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./scripts/adaptive-scheduler.sh

      - name: Create requirements file
        run: echo "oci-cli" > requirements.txt

      - name: Setup Python
        uses: actions/setup-python@v5.6.0
        id: setup-python
        with:
          python-version: '3.x'
          check-latest: false
          update-environment: true

      - name: Cache pip dependencies
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib
            ~/.local/bin
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pip-

      - name: Install OCI CLI
        run: pip install --user -r requirements.txt

      - name: Production preflight check
        env:
          OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
          OCI_KEY_FINGERPRINT: ${{ secrets.OCI_KEY_FINGERPRINT }}
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_COMPARTMENT_ID: ${{ secrets.OCI_COMPARTMENT_ID }}
          OCI_SUBNET_ID: ${{ secrets.OCI_SUBNET_ID }}
          OCI_IMAGE_ID: ${{ secrets.OCI_IMAGE_ID }}
          OCI_PROXY_URL: ${{ secrets.OCI_PROXY_URL }}
          INSTANCE_SSH_PUBLIC_KEY: ${{ secrets.INSTANCE_SSH_PUBLIC_KEY }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        run: ./scripts/preflight-check.sh

      - name: Setup OCI and SSH configuration (parallel)
        env:
          OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
          OCI_KEY_FINGERPRINT: ${{ secrets.OCI_KEY_FINGERPRINT }}
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_PROXY_URL: ${{ secrets.OCI_PROXY_URL }}
          INSTANCE_SSH_PUBLIC_KEY: ${{ secrets.INSTANCE_SSH_PUBLIC_KEY }}
        run: |
          # Run setup scripts in parallel for faster execution
          ./scripts/setup-oci.sh &
          ./scripts/setup-ssh.sh &
          wait

      - name: Launch OCI Instances (Parallel)
        env:
          OCI_COMPARTMENT_ID: ${{ secrets.OCI_COMPARTMENT_ID }}
          OCI_SUBNET_ID: ${{ secrets.OCI_SUBNET_ID }}
          OCI_IMAGE_ID: ${{ secrets.OCI_IMAGE_ID }}
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          OCI_PROXY_URL: ${{ secrets.OCI_PROXY_URL }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
          CACHE_ENABLED: "true"
          CACHE_TTL_HOURS: "24"
          CACHE_DATE_KEY: ${{ steps.get-date.outputs.date }}
        run: ./scripts/launch-parallel.sh

      - name: Verify instances and update state
        if: always()
        env:
          OCI_COMPARTMENT_ID: ${{ secrets.OCI_COMPARTMENT_ID }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          CACHE_ENABLED: "true"
          CACHE_TTL_HOURS: "24"
          CACHE_DATE_KEY: ${{ steps.get-date.outputs.date }}
        run: |
          # Verify actual instance state via OCI API and update cache
          echo "Verifying instance state and updating cache..."
          if [[ "$DEBUG" == "true" ]]; then
            ./scripts/state-manager.sh print
          fi

      - name: Save instance state cache
        if: always()
        uses: actions/cache/save@v4.2.4
        with:
          path: .cache/oci-state
          key: ${{ steps.cache-key.outputs.key }}

      - name: Schedule Optimization Analysis
        if: always() && env.ENABLE_ADAPTIVE_SCHEDULING == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
        run: ./scripts/schedule-optimizer.sh

  notify-on-failure:
    runs-on: ubuntu-latest
    name: Send Failure Notification (Both Shapes Failed)
    needs: create-instance
    if: failure()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Check if failure was due to capacity
        id: check-capacity
        run: |
          # Check if the failure was due to capacity issues
          # This provides defense-in-depth against false failure notifications
          echo "capacity_error=false" >> "$GITHUB_OUTPUT"
          # Note: GitHub job logs would need to be checked via API for full implementation
          # For now, we rely on the script-level fix to handle capacity errors properly

      - name: Send failure notification
        if: steps.check-capacity.outputs.capacity_error != 'true'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        run: |
          if [[ "$ENABLE_NOTIFICATIONS" == "true" ]]; then
            source scripts/notify.sh
            notify_workflow_completed "failed"
          fi
