name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        # Optional: Skip review for certain conditions
        if: |
          !contains(github.event.pull_request.title, '[skip-review]') &&
          !contains(github.event.pull_request.title, '[WIP]')
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          model: "claude-opus-4-1-20250805"

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this pull request with comprehensive analysis covering both general software engineering principles and OCI automation specifics:

            **General Code Quality & Best Practices:**
            - Code structure, readability, and maintainability
            - Proper error handling and input validation
            - Logic bugs, edge cases, and null checks
            - Algorithm efficiency and resource usage
            - Documentation quality and code comments
            - Adherence to coding standards and conventions

            **Security Analysis (General & OCI-Specific):**
            - Input validation and injection vulnerabilities
            - Authentication and authorization patterns
            - **OCI Credential Safety**: Check for exposed credentials (OCI OCIDs, keys, SSH keys, tokens)
            - **Parameter redaction**: OCIDs should show as ocid1234...5678, keys as [REDACTED]
            - Verify secrets are only used in GitHub Actions, never in artifacts
            - Distinguish capacity issues from real security failures

            **Performance Considerations:**
            - Algorithm complexity and optimization opportunities
            - Memory usage and resource efficiency
            - **OCI Performance**: Target <1 minute execution time
            - **GitHub Actions**: Monitor usage to stay under 1,800 minutes/month target
            - Caching strategies and optimization patterns

            **Test Coverage & Quality:**
            - Test completeness and edge case coverage
            - Test quality, clarity, and maintainability
            - Integration test scenarios
            - Error condition testing

            **OCI-Specific Automation Patterns:**
            - Validate OCID format: ^ocid1\\.type\\.[a-z0-9-]*\\.[a-z0-9-]*\\..+
            - Check flexible shape configurations include --shape-config
            - Verify capacity errors return 0 (expected) vs 1 (real failure)
            - Confirm transient errors retry properly before AD cycling
            - Multi-AD cycling logic and retry mechanisms
            - Bash script validation and OCI CLI optimization

            **Potential Bugs & Issues:**
            - Race conditions and concurrency issues
            - Boundary conditions and error states
            - Configuration and environment dependencies
            - Workflow and automation reliability

            Be constructive, thorough, and provide specific actionable feedback.

          # Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          use_sticky_comment: true
          
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # Allow specific tools for validation and testing
          allowed_tools: "Bash(bash -n scripts/*.sh),Bash(./tests/test_*.sh),Bash(yamllint .github/workflows/*.yml)"

