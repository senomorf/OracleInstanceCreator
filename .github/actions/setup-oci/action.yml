name: 'Setup OCI Environment'
description: 'Sets up OCI CLI, Python, SSH, and caching for Oracle Cloud Infrastructure workflows'

inputs:
  oci_user_ocid:
    description: 'OCI User OCID'
    required: true
  oci_key_fingerprint:
    description: 'OCI Key Fingerprint'
    required: true
  oci_tenancy_ocid:
    description: 'OCI Tenancy OCID'
    required: true
  oci_region:
    description: 'OCI Region'
    required: true
  oci_private_key:
    description: 'OCI Private Key'
    required: true
  oci_proxy_url:
    description: 'OCI Proxy URL (optional)'
    required: false
  instance_ssh_public_key:
    description: 'SSH Public Key for instances'
    required: true
  telegram_token:
    description: 'Telegram Bot Token'
    required: false
  telegram_user_id:
    description: 'Telegram User ID'
    required: false
  enable_notifications:
    description: 'Enable Telegram notifications'
    required: false
    default: 'true'

outputs:
  cache_key:
    description: 'Generated cache key for OCI state'
    value: ${{ steps.cache-key.outputs.key }}
  setup_completed:
    description: 'Whether setup completed successfully'
    value: 'true'

runs:
  using: 'composite'
  steps:
    - name: Get current date for cache key
      id: get-date
      shell: bash
      run: echo "date=$(date '+%Y-%m-%d')" >> "$GITHUB_OUTPUT"

    - name: Generate cache key with region hash
      id: cache-key
      shell: bash
      env:
        OCI_REGION: ${{ inputs.oci_region }}
      run: |
        # Generate region hash to match state-manager.sh logic
        region_hash=$(echo -n "$OCI_REGION" | sha256sum | cut -d' ' -f1 | head -c 8)
        echo "key=oci-instances-${region_hash}-v1-${{ steps.get-date.outputs.date }}" >> "$GITHUB_OUTPUT"
        echo "prefix=oci-instances-${region_hash}-v1-" >> "$GITHUB_OUTPUT"

    - name: Restore instance state cache
      id: cache-instance-state
      uses: actions/cache/restore@v4.2.4
      with:
        path: .cache/oci-state
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          ${{ steps.cache-key.outputs.prefix }}
          oci-instances-

    - name: Initialize state manager
      shell: bash
      env:
        CACHE_ENABLED: "true"
        CACHE_TTL_HOURS: "24"
        CACHE_DATE_KEY: ${{ steps.get-date.outputs.date }}
      run: |
        # Make state manager executable
        chmod +x scripts/state-manager.sh
        # Initialize state management system
        ./scripts/state-manager.sh init
        # Show current state for debugging
        if [[ "${SCRIPT_DEBUG:-}" == "true" ]]; then
          ./scripts/state-manager.sh print
        fi

    - name: Create requirements file
      shell: bash
      run: echo "oci-cli" > requirements.txt

    - name: Setup Python
      uses: actions/setup-python@v5.6.0
      id: setup-python
      with:
        python-version: '3.x'
        check-latest: false
        update-environment: true

    - name: Cache pip dependencies
      uses: actions/cache@v4.2.4
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib
          ~/.local/bin
        key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pip-

    - name: Install OCI CLI
      shell: bash
      run: pip install --user -r requirements.txt

    - name: Production preflight check
      shell: bash
      env:
        OCI_USER_OCID: ${{ inputs.oci_user_ocid }}
        OCI_KEY_FINGERPRINT: ${{ inputs.oci_key_fingerprint }}
        OCI_TENANCY_OCID: ${{ inputs.oci_tenancy_ocid }}
        OCI_REGION: ${{ inputs.oci_region }}
        OCI_PRIVATE_KEY: ${{ inputs.oci_private_key }}
        OCI_PROXY_URL: ${{ inputs.oci_proxy_url }}
        INSTANCE_SSH_PUBLIC_KEY: ${{ inputs.instance_ssh_public_key }}
        TELEGRAM_TOKEN: ${{ inputs.telegram_token }}
        TELEGRAM_USER_ID: ${{ inputs.telegram_user_id }}
        ENABLE_NOTIFICATIONS: ${{ inputs.enable_notifications }}
      run: ./scripts/preflight-check.sh

    - name: Setup OCI and SSH configuration (parallel)
      shell: bash
      env:
        OCI_USER_OCID: ${{ inputs.oci_user_ocid }}
        OCI_KEY_FINGERPRINT: ${{ inputs.oci_key_fingerprint }}
        OCI_TENANCY_OCID: ${{ inputs.oci_tenancy_ocid }}
        OCI_REGION: ${{ inputs.oci_region }}
        OCI_PRIVATE_KEY: ${{ inputs.oci_private_key }}
        OCI_PROXY_URL: ${{ inputs.oci_proxy_url }}
        INSTANCE_SSH_PUBLIC_KEY: ${{ inputs.instance_ssh_public_key }}
      run: |
        # Run setup scripts in parallel for faster execution
        ./scripts/setup-oci.sh &
        ./scripts/setup-ssh.sh &
        wait
